services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PW:-password}
      POSTGRES_DB: ${DATABASE_NAME:-bmhk_2025}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  pgbackrest:
    image: ghcr.io/pgbackrest/pgbackrest:latest
    env_file: ".env"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - pgbackrest_repo:/var/lib/pgbackrest
      - ./pgbackrest:/etc/pgbackrest
      - ./pgbackrest-logs:/var/log/pgbackrest
    environment:
      PGBACKREST_STANZA: db
    networks:
      - app_network
    command: >
      sh -c "
        if [ ! -f /etc/pgbackrest/pgbackrest.conf ]; then
          echo '[global]' > /etc/pgbackrest/pgbackrest.conf &&
          echo 'repo1-type=s3' >> /etc/pgbackrest/pgbackrest.conf &&
          echo 'repo1-path=/var/lib/pgbackrest' >> /etc/pgbackrest/pgbackrest.conf &&
          echo 'repo1-s3-bucket=${S3_BUCKET_NAME_PGBACKREST}' >> /etc/pgbackrest/pgbackrest.conf &&
          echo 'repo1-s3-endpoint=${S3_ENDPOINT}' >> /etc/pgbackrest/pgbackrest.conf &&
          echo 'repo1-s3-region=auto' >> /etc/pgbackrest/pgbackrest.conf &&
          echo 'repo1-s3-uri-style=path' /etc/pgbackrest/pgbackrest.conf &&
          echo 'repo1-s3-key=${S3_ACCESS_KEY_ID_PGBACKREST}' >> /etc/pgbackrest/pgbackrest.conf &&
          echo 'repo1-s3-key-secret=${S3_SECRET_KEY_PGBACKREST}' >> /etc/pgbackrest/pgbackrest.conf &&
          echo '[db]' >> /etc/pgbackrest/pgbackrest.conf &&
          echo 'pg1-path=/var/lib/postgresql/data' >> /etc/pgbackrest/pgbackrest.conf ;
        fi &&
        tail -f /dev/null
      "

  watchtower:
    image: containrrr/watchtower
    env_file: ".env"
    command:
      - "--label-enable"
      - "--interval"
      - "30"
      - "--rolling-restart"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  reverse-proxy:
    image: traefik:v3.1
    command:
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.server.address=:7642"
    ports:
      - "7642:7642"
    depends_on:
      - web
      - api
    networks:
      - app_network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  web:
    image: ghcr.io/beambeambeam/bmhk-2025-web:staging
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`develop.bangmodhackathon.com`)"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
      - "com.centurylinklabs.watchtower.enable=true"
    env_file: ".env"
    deploy:
      mode: replicated
      replicas: 2
    restart: unless-stopped
    networks:
      - app_network
  api:
    image: ghcr.io/beambeambeam/bmhk-2025-api:staging
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.server.rule=Host(`api-staging.bangmodhackathon.com`)"
      - "traefik.http.services.server.loadbalancer.server.port=3001"
      - "com.centurylinklabs.watchtower.enable=true"
    env_file: ".env"
    deploy:
      mode: replicated
      replicas: 2
    restart: unless-stopped
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local

networks:
  app_network:
    driver: bridge
